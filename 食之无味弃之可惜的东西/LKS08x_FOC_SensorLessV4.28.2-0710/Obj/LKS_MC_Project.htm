<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\LKS_MC_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\LKS_MC_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jul 10 17:46:14 2025
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">CAN_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CAN_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC0_IRQHandler</a> from interrupt.o(i.ADC0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[19]">CAN_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[15]">CMP_IRQHandler</a> from interrupt.o(i.CMP_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[18]">DMA_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[12]">DSP_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[a]">ENCODER0_IRQHandler</a> from interrupt.o(i.ENCODER0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[b]">ENCODER1_IRQHandler</a> from interrupt.o(i.ENCODER1_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[d]">GPIO_IRQHandler</a> from interrupt.o(i.GPIO_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[f]">HALL_IRQHandler</a> from interrupt.o(i.HALL_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[c]">I2C0_IRQHandler</a> from interrupt.o(i.I2C0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1e]">MCPWM0_RegUpdate</a> from hardware_init.o(i.MCPWM0_RegUpdate) referenced from foc_drive.o(i.FOC_InitstruParam)
 <LI><a href="#[13]">MCPWM_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[17]">PWRDN_IRQHandler</a> from interrupt.o(i.PWRDN_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1a]">SIF_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from interrupt.o(i.SPI0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1c]">SystemInit</a> from hardware_init.o(i.SystemInit) referenced from startup_lks32mc08x.o(.text)
 <LI><a href="#[e]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[6]">UTIMER0_IRQHandler</a> from interrupt.o(i.UTIMER0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[7]">UTIMER1_IRQHandler</a> from interrupt.o(i.UTIMER1_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[8]">UTIMER2_IRQHandler</a> from interrupt.o(i.UTIMER2_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[9]">UTIMER3_IRQHandler</a> from interrupt.o(i.UTIMER3_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[16]">WAKE_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lks32mc08x.o(.text)
 <LI><a href="#[1b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DSP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WAKE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcVoltPerUnitCalc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[ca]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassControl
</UL>

<P><STRONG><a name="[cc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGetPhaseCurrent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c0]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_l2d</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[36]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[30]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ADC0_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, interrupt.o(i.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC0_IRQHandler &rArr; FOC_Model &rArr; AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerCalc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAmplitudeCalc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC0_init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, hardware_init.o(i.ADC0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0_init &rArr; ADC_NormalModeCFG &rArr; ADC_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NormalModeCFG
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatePosSeek
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[49]"></a>ADC_ChannelConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lks32mc08x_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NormalModeCFG
</UL>

<P><STRONG><a name="[45]"></a>ADC_Init</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, lks32mc08x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[46]"></a>ADC_NormalModeCFG</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, signalchain_sample.o(i.ADC_NormalModeCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_NormalModeCFG &rArr; ADC_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[44]"></a>ADC_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lks32mc08x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[4a]"></a>AdcSampleCal</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, foc_drive.o(i.AdcSampleCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGetPhaseCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[72]"></a>App2CoreCurTrans</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app2core.o(i.App2CoreCurTrans))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateHallRun
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateDirCheck
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfDirCheck
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[4f]"></a>App2CoreFreqTrans</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app2core.o(i.App2CoreFreqTrans))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfDirCheck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BemfSwitch
</UL>

<P><STRONG><a name="[4c]"></a>AutoFieldWeakReg</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, fluxobserve.o(i.AutoFieldWeakReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AutoFieldWeakReg &rArr; FWLoopPIReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWLoopPIReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[4e]"></a>BemfSwitch</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, bemf_check0824.o(i.BemfSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BemfSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[50]"></a>Bemf_CheckInit</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, bemf_check0824.o(i.Bemf_CheckInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bemf_CheckInit &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[53]"></a>Bemf_CheckProcess</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, bemf_check0824.o(i.Bemf_CheckProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Bemf_CheckProcess &rArr; User2AppFreqTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Atan
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowPass_filter
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[6d]"></a>BrakeStateCheck</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, onthefly.o(i.BrakeStateCheck))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[15]"></a>CMP_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, interrupt.o(i.CMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CMP_Init</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, lks32mc08x_cmp.o(i.CMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[59]"></a>CMP_StructInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lks32mc08x_cmp.o(i.CMP_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMP_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[5b]"></a>CMP_init</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, hardware_init.o(i.CMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CMP_init &rArr; CMP_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[54]"></a>Calc_Atan</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, lib_svpwm.o(i.Calc_Atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calc_Atan
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_AngleCalc
</UL>

<P><STRONG><a name="[5c]"></a>Clock_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hardware_init.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clock_Init &rArr; SYS_VolSelModule &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModule
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[41]"></a>CurrentAmplitudeCalc</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, fault_detection.o(i.CurrentAmplitudeCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentAmplitudeCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>CurrentLoopAxisD_Set</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, state_machine.o(i.CurrentLoopAxisD_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateHallRun
</UL>

<P><STRONG><a name="[af]"></a>CurrentLoopAxisQ_Set</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, state_machine.o(i.CurrentLoopAxisQ_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateHallRun
</UL>

<P><STRONG><a name="[5f]"></a>CurrentLoopReg</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, foc_drive.o(i.CurrentLoopReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CurrentLoopReg &rArr; ModuCircle_Limitation &rArr; Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuCircle_Limitation
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[62]"></a>CurrentOffsetCalibration</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, system_init.o(i.CurrentOffsetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CurrentOffsetCalibration &rArr; ADC0_init &rArr; ADC_NormalModeCFG &rArr; ADC_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NormalModeCFG
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[60]"></a>CurrentPIRegulator</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pid_regulators.o(i.CurrentPIRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
</UL>

<P><STRONG><a name="[63]"></a>DAC_init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, hardware_init.o(i.DAC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[64]"></a>DSP_Init</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lks32mc08x_sys.o(i.DSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[66]"></a>DcVoltPerUnitCalc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fluxobserve.o(i.DcVoltPerUnitCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DcVoltPerUnitCalc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[a]"></a>ENCODER0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ENCODER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ENCODER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ENCODER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FOC_InitstruParam</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, foc_drive.o(i.FOC_InitstruParam))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
</UL>

<P><STRONG><a name="[3f]"></a>FOC_Model</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, foc_drive.o(i.FOC_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FOC_Model &rArr; AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGEN
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCloseAngleSwitch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTheFlyDetectPro
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeStateCheck
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BemfSwitch
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFieldWeakReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>FWLoopPIReg</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fluxobserve.o(i.FWLoopPIReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FWLoopPIReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFieldWeakReg
</UL>

<P><STRONG><a name="[6e]"></a>FaultCheck</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fault_detection.o(i.FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FaultCheck &rArr; FaultVoltageCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultVoltageCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[70]"></a>FaultInit</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, fault_detection.o(i.FaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[74]"></a>FaultRecoverInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fault_detection.o(i.FaultRecoverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FaultRecoverInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[6f]"></a>FaultVoltageCheck</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fault_detection.o(i.FaultVoltageCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FaultVoltageCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[91]"></a>FindMaxIn3</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lib_ipd.o(i.FindMaxIn3))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_AngleCalc
</UL>

<P><STRONG><a name="[7b]"></a>FindQNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fluxobserve.o(i.FindQNum))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[75]"></a>FluxObserveInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_init.o(i.FluxObserveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FluxObserveInit &rArr; FluxObserveParaCalc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitstruParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[76]"></a>FluxObserveParaCalc</STRONG> (Thumb, 1176 bytes, Stack size 48 bytes, fluxobserve.o(i.FluxObserveParaCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FluxObserveParaCalc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindQNum
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
</UL>

<P><STRONG><a name="[d]"></a>GPIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, lks32mc08x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, lks32mc08x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ResetBits</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lks32mc08x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_SetBits</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lks32mc08x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[81]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lks32mc08x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_WriteBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lks32mc08x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[80]"></a>GPIO_init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, hardware_init.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[f]"></a>HALL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HALL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>HALL_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lks32mc08x_hall.o(i.HALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_init
</UL>

<P><STRONG><a name="[84]"></a>HALL_Perip_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hardware_init.o(i.HALL_Perip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HALL_Perip_init &rArr; HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_StructInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[85]"></a>HALL_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc08x_hall.o(i.HALL_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_init
</UL>

<P><STRONG><a name="[86]"></a>Hardware_init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, hardware_init.o(i.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hardware_init &rArr; UART_init &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleEnableIRQ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IPD_AngleCalc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lib_ipd.o(i.IPD_AngleCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IPD_AngleCalc &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Atan
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMaxIn3
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
</UL>

<P><STRONG><a name="[92]"></a>IPD_RotorPosEst</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lib_ipd.o(i.IPD_RotorPosEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IPD_RotorPosEst &rArr; AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_Trg_ADC
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPulsePwmSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoloEstCurSample
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_AngleCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatePosSeek
</UL>

<P><STRONG><a name="[96]"></a>LowPassControl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, powercalculation.o(i.LowPassControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LowPassControl &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerCalc
</UL>

<P><STRONG><a name="[1e]"></a>MCPWM0_RegUpdate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hardware_init.o(i.MCPWM0_RegUpdate))
<BR>[Address Reference Count : 1]<UL><LI> foc_drive.o(i.FOC_InitstruParam)
</UL>
<P><STRONG><a name="[97]"></a>MCPWM_Init</STRONG> (Thumb, 718 bytes, Stack size 8 bytes, lks32mc08x_mcpwm.o(i.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[98]"></a>MCPWM_StructInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lks32mc08x_mcpwm.o(i.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[88]"></a>MCPWM_init</STRONG> (Thumb, 180 bytes, Stack size 112 bytes, hardware_init.o(i.MCPWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatePosSeek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[61]"></a>ModuCircle_Limitation</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fluxobserve.o(i.ModuCircle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModuCircle_Limitation &rArr; Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
</UL>

<P><STRONG><a name="[b0]"></a>OnTheFlyDetectInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fluxobserve.o(i.OnTheFlyDetectInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[68]"></a>OnTheFlyDetectPro</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, onthefly.o(i.OnTheFlyDetectPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OnTheFlyDetectPro
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[69]"></a>OpenCloseAngleSwitch</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fluxobserve.o(i.OpenCloseAngleSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpenCloseAngleSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[a5]"></a>OpenLoopCurRamp</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, process_control.o(i.OpenLoopCurRamp))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[8a]"></a>PGA_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hardware_init.o(i.PGA_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PGA_init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[57]"></a>PWMOutputs</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lks32mc08x_mcpwm.o(i.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultVoltageCheck
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateFault
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfStop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfDirCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>PWRDN_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PWRDN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWRDN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>PmsmFluxObIni</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fluxobserve.o(i.PmsmFluxObIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PmsmFluxObIni
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[6c]"></a>PmsmFluxObserve</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, fluxobserve.o(i.PmsmFluxObserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PmsmFluxObserve &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Atan
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentPIRegulator
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[95]"></a>PoloEstCurSample</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib_ipd.o(i.PoloEstCurSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PoloEstCurSample &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
</UL>

<P><STRONG><a name="[40]"></a>PowerCalc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, powercalculation.o(i.PowerCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerCalc &rArr; LowPassControl &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>Read_Trim</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lks32mc08x_nvr.o(i.Read_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[8e]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[42]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SVPWM_2ShuntGEN</STRONG> (Thumb, 310 bytes, Stack size 28 bytes, lib_svpwm.o(i.SVPWM_2ShuntGEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SVPWM_2ShuntGEN
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[4b]"></a>SVPWM_2ShuntGetPhaseCurrent</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, signalchain_sample.o(i.SVPWM_2ShuntGetPhaseCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SVPWM_2ShuntGetPhaseCurrent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
</UL>

<P><STRONG><a name="[47]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lks32mc08x_sys.o(i.SYS_AnalogModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[65]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lks32mc08x_sys.o(i.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
</UL>

<P><STRONG><a name="[5d]"></a>SYS_VolSelModule</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lks32mc08x_sys.o(i.SYS_VolSelModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_VolSelModule &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[8f]"></a>SYS_VolSelModuleEnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lks32mc08x_sys.o(i.SYS_VolSelModuleEnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_VolSelModuleEnableIRQ &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[99]"></a>SYS_VolSelModuleIRQ</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lks32mc08x_sys.o(i.SYS_VolSelModuleIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRDN_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>SoftDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hardware_init.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[b3]"></a>SpeedReferenceGen</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, process_control.o(i.SpeedReferenceGen))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
</UL>

<P><STRONG><a name="[a4]"></a>StateAlign</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, state_machine.o(i.StateAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateAlign &rArr; User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLoopCurRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[a6]"></a>StateBemfDirCheck</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, state_machine.o(i.StateBemfDirCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateBemfDirCheck &rArr; User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[a7]"></a>StateBemfStop</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, state_machine.o(i.StateBemfStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateBemfStop &rArr; User2AppAngleTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[a9]"></a>StateCharge</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, state_machine.o(i.StateCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = StateCharge &rArr; StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[ab]"></a>StateDirCheck</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, state_machine.o(i.StateDirCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = StateDirCheck &rArr; User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[ac]"></a>StateFault</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state_machine.o(i.StateFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StateFault
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[ad]"></a>StateHallRun</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, state_machine.o(i.StateHallRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateHallRun &rArr; User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisQ_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[aa]"></a>StateInit</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, state_machine.o(i.StateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObIni
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTheFlyDetectInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[b2]"></a>StateOpen</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, state_machine.o(i.StateOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateOpen &rArr; User2AppFreqTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedReferenceGen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[b4]"></a>StatePosSeek</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, state_machine.o(i.StatePosSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StatePosSeek &rArr; MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[b5]"></a>StateRun</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, state_machine.o(i.StateRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateRun &rArr; User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisQ_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[b6]"></a>StateStop</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, state_machine.o(i.StateStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StateStop &rArr; User2AppAngleTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Sys_State_Machine</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, state_machine.o(i.Sys_State_Machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Sys_State_Machine &rArr; StateCharge &rArr; StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateStop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatePosSeek
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateHallRun
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateFault
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateDirCheck
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfStop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfDirCheck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[1c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardware_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; Clock_Init &rArr; SYS_VolSelModule &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>TIM_TimerCmd</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, lks32mc08x_tim.o(i.TIM_TimerCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[b8]"></a>TIM_TimerInit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, lks32mc08x_tim.o(i.TIM_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[be]"></a>TIM_TimerStrutInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lks32mc08x_tim.o(i.TIM_TimerStrutInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[ba]"></a>Task_Scheduler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, task_scheduler.o(i.Task_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcVoltPerUnitCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>TempSensor_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lks32mc08x_tmp.o(i.TempSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TempSensor_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[6a]"></a>Trig_Functions</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mc_math.o(i.Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuCircle_Limitation
</UL>

<P><STRONG><a name="[e]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>UART_Init</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lks32mc08x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>

<P><STRONG><a name="[bd]"></a>UART_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lks32mc08x_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>

<P><STRONG><a name="[87]"></a>UART_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hardware_init.o(i.UART_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_init &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[6]"></a>UTIMER0_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, interrupt.o(i.UTIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UTIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UTIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UTIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UTIMER2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UTIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UTIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UTimer_init</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, hardware_init.o(i.UTimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UTimer_init &rArr; TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerStrutInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[a8]"></a>User2AppAngleTrans</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app2core.o(i.User2AppAngleTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = User2AppAngleTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateStop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfStop
</UL>

<P><STRONG><a name="[71]"></a>User2AppCurTrans</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app2core.o(i.User2AppCurTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = User2AppCurTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateHallRun
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateDirCheck
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateBemfDirCheck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[55]"></a>User2AppFreqTrans</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app2core.o(i.User2AppFreqTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = User2AppFreqTrans &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VspSpeedScan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
</UL>

<P><STRONG><a name="[73]"></a>User2AppVolTrans</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, app2core.o(i.User2AppVolTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[93]"></a>VolPulsePwmSet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lib_ipd.o(i.VolPulsePwmSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VolPulsePwmSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
</UL>

<P><STRONG><a name="[bb]"></a>VspSpeedScan</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, speedscan.o(i.VspSpeedScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VspSpeedScan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[3d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[79]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fluxobserve.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[7a]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fluxobserve.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[67]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib_svpwm.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGetPhaseCurrent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolPulsePwmSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoloEstCurSample
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[56]"></a>lowPass_filter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_svpwm.o(i.lowPass_filter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckProcess
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>soft_Trg_ADC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lib_ipd.o(i.soft_Trg_ADC))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_RotorPosEst
</UL>

<P><STRONG><a name="[c1]"></a>sys_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_init.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_init &rArr; FaultRecoverInit &rArr; User2AppVolTrans &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bemf_CheckInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hardware_init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[8c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hardware_init.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lks32mc08x_sys.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleIRQ
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModule
</UL>

<P><STRONG><a name="[a3]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lks32mc08x_sys.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleEnableIRQ
</UL>

<P><STRONG><a name="[a2]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lks32mc08x_sys.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModuleEnableIRQ
</UL>

<P><STRONG><a name="[a0]"></a>SoftDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lks32mc08x_sys.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_VolSelModule
</UL>

<P><STRONG><a name="[9a]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
</UL>

<P><STRONG><a name="[9c]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[9e]"></a>_WriteBlocking</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[9d]"></a>_WriteNoCheck</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
