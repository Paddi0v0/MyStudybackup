<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lks08x_foc_open_Senseless.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lks08x_foc_open_Senseless.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Fri Jun 27 21:20:36 2025
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Hardware_init &rArr; GPIO_init &rArr; GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[30]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CAN_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CAN_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC0_IRQHandler</a> from interrupt.o(.text.ADC0_IRQHandler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[19]">CAN_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[15]">CMP_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[18]">DMA_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[12]">DSP_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[a]">ENCODER0_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[b]">ENCODER1_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[d]">GPIO_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[f]">HALL_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[c]">I2C0_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[13]">MCPWM_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[17]">PWRDN_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupt.o(.text.PendSV_Handler) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1a]">SIF_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from hardware_init.o(.text.SystemInit) referenced from startup_lks32mc08x.o(.text)
 <LI><a href="#[e]">UART0_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[6]">UTIMER0_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[7]">UTIMER1_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[8]">UTIMER2_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[9]">UTIMER3_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[16]">WAKE_IRQHandler</a> from startup_lks32mc08x.o(.text) referenced from startup_lks32mc08x.o(RESET)
 <LI><a href="#[1c]">__main</a> from __main.o(!!!main) referenced from startup_lks32mc08x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[23]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[60]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[61]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[62]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[63]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[64]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[65]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[66]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[67]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[70]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[71]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[72]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[74]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[20]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[24]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Hardware_init &rArr; GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[27]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[7d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[29]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DSP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>ENCODER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ENCODER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWRDN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UTIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UTIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UTIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UTIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WAKE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc08x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lks32mc08x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_PI_AntiDump
</UL>

<P><STRONG><a name="[7e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_PI_AntiDump
</UL>

<P><STRONG><a name="[7f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2b]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
</UL>

<P><STRONG><a name="[80]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_clear
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[82]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[26]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[85]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[86]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[87]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ADC0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, interrupt.o(.text.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC0_IRQHandler &rArr; FOC_Model &rArr; SMO_CalcElAngle &rArr; lks08x_dsp_arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, lks32mc08x_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[37]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lks32mc08x_adc.o(.text.ADC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[3a]"></a>Clarke</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clarke_park.o(.text.Clarke))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[4a]"></a>DSP_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lks32mc08x_sys.o(.text.DSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[38]"></a>FOC_InitstruParama</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, foc_drive.o(.text.FOC_InitstruParama))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOC_InitstruParama &rArr; SMO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[33]"></a>FOC_Model</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, foc_drive.o(.text.FOC_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FOC_Model &rArr; SMO_CalcElAngle &rArr; lks08x_dsp_arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rev_Park
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevPark_Circle_Limitation
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clarke
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_CalcElAngle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_PI_AntiDump
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_RegUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lks32mc08x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[46]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, lks32mc08x_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lks32mc08x_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_in
</UL>

<P><STRONG><a name="[44]"></a>GPIO_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lks32mc08x_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[43]"></a>GPIO_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hardware_init.o(.text.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[3e]"></a>HL_PI_AntiDump</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, pid_regulators.o(.text.HL_PI_AntiDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HL_PI_AntiDump &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Run
</UL>

<P><STRONG><a name="[49]"></a>Hardware_init</STRONG> (Thumb, 284 bytes, Stack size 128 bytes, hardware_init.o(.text.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Hardware_init &rArr; GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Key_in</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, key.o(.text.Key_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_in
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4f]"></a>MCL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, foc_drive.o(.text.MCL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCL_Init &rArr; SMO_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[42]"></a>MCPWM0_RegUpdate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardware_init.o(.text.MCPWM0_RegUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[4c]"></a>MCPWM_Init</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, lks32mc08x_mcpwm.o(.text.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[4b]"></a>MCPWM_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lks32mc08x_mcpwm.o(.text.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[56]"></a>PWMOutputs</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lks32mc08x_mcpwm.o(.text.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[3d]"></a>Park</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clarke_park.o(.text.Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Park
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupt.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PendSV_Handler &rArr; Sys_State_Machine &rArr; Sys_State_Run &rArr; HL_PI_AntiDump &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_in
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RevPark_Circle_Limitation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, clarke_park.o(.text.RevPark_Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RevPark_Circle_Limitation &rArr; lks08x_dsp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[40]"></a>Rev_Park</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clarke_park.o(.text.Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rev_Park
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[3b]"></a>SMO_CalcElAngle</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, smo.o(.text.SMO_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SMO_CalcElAngle &rArr; lks08x_dsp_arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_arctan
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[50]"></a>SMO_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smo.o(.text.SMO_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMO_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_Init
</UL>

<P><STRONG><a name="[39]"></a>SMO_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, smo.o(.text.SMO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitstruParama
</UL>

<P><STRONG><a name="[41]"></a>SVPWM</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, clarke_park.o(.text.SVPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SVPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[35]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lks32mc08x_sys.o(.text.SYS_AnalogModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[51]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc08x_sys.o(.text.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
</UL>

<P><STRONG><a name="[59]"></a>SYS_SoftResetModule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lks32mc08x_sys.o(.text.SYS_SoftResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_arctan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_sqrt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_sin_cos
</UL>

<P><STRONG><a name="[52]"></a>Sys_State_Machine</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, task_scheduler.o(.text.Sys_State_Machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sys_State_Machine &rArr; Sys_State_Run &rArr; HL_PI_AntiDump &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Run
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[57]"></a>Sys_State_Run</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, task_scheduler.o(.text.Sys_State_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sys_State_Run &rArr; HL_PI_AntiDump &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_PI_AntiDump
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, hardware_init.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc08x.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>Trig_Functions</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clarke_park.o(.text.Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Trig_Functions &rArr; lks08x_dsp_sin_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lks08x_dsp_sin_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[54]"></a>lks08x_dsp_arctan</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, lks32mc08x_dsp.o(.text.lks08x_dsp_arctan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lks08x_dsp_arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_CalcElAngle
</UL>

<P><STRONG><a name="[58]"></a>lks08x_dsp_sin_cos</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lks32mc08x_dsp.o(.text.lks08x_dsp_sin_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lks08x_dsp_sin_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>

<P><STRONG><a name="[53]"></a>lks08x_dsp_sqrt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lks32mc08x_dsp.o(.text.lks08x_dsp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lks08x_dsp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevPark_Circle_Limitation
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; Hardware_init &rArr; GPIO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>sys_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sys_init.o(.text.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_init &rArr; FOC_InitstruParama &rArr; SMO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitstruParama
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>Read_Trim</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lks32mc08x_nvr.o(i.Read_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
